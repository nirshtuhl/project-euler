#!/usr/bin/python
## Project Euler problems
import math


## Problem 1: Multiples of 3 and 5
## If we list all the natural numbers below 10 that are multiples
## of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
## Find the sum of all the multiples of 3 or 5 below 1000.

# div_by_3_or_5 : int -> bool
# Is n divisible by either 3 or 5?
def div_by_3_or_5(n):
    return n % 3 == 0 or n % 5 == 0

# sum_divs_below_n : int -> int
# O(n) Sum the integers below n that are divisible by 3 or 5
def sum_divs_below_n(n):
    total = 0
    i = 1
    while (i < n):
        if div_by_3_or_5(i):
            total = total + i
        i += 1
    print(total)



## Problem 2: Even Fibonacci numbers
## Each new term in the Fibonacci sequence is generated by adding
## the previous two terms. By starting with 1 and 2, the first 10 terms will be:
## 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
## By considering the terms in the Fibonacci sequence whose values
## do not exceed four million, find the sum of the even-valued terms.

# sum_even_fibs_below_n : int -> int
# Generates a list of even Fibonacci numbers whose values do not exceed n
def sum_fibs_below_n(n):
    a = 1
    b = 1
    fibs = []
    while (a < n):
        if (a % 2 == 0):
            fibs.append(a)
        a, b = a + b, a
    print(sum(fibs))    



## Problem 3: Largest prime factor
## The prime factors of 13195 are 5, 7, 13 and 29.
## What is the largest prime factor of the number 600851475143 ?

# greatest_prime_factor : int -> int
# O(n) If a divisor is found, divide n by it until it will not divide anymore
# Takes n steps for prime values of n 
def greatest_prime_factor(n):
    i = 2
    while i * i < n:
        while n % i == 0:
            n = n / i
        i += 1
    print(n)



## Problem 4: Largest palindrome product
## A palindromic number reads the same both ways. The largest palindrome
## made from the product of two 2-digit numbers is 9009 = 91 * 99.
## Find the largest palindrome made from the product of two 3-digit numbers.

## is_palindrome : int -> bool
## Is n a palindrome?
def is_palindrome(n):
    return str(n) == str(n)[::-1]

## cartesian : int -> list(int)
## Builds a list of all products of two integers below n
def cartesian(n):
    products = []
    for x in range(n):
        for y in range(x, n):
            products.append(x*y)
    return products

## largest_palindrome_product : int -> int
## Finds the largest palindrome product of two integers, each below n
def largest_palindrome_product(n):
    return max(filter(is_palindrome, cartesian(n)))



## Problem 5: Smallest multiple
## 2520 is the smallest number that can be divided by each
## of the numbers from 1 to 10 without any remainder.
## What is the smallest positive number that is evenly divisible
## by all of the numbers from 1 to 20?

## gcd : int int -> int
## Greatest common divisor of a and b
def gcd(a, b):
    if a == 0:
        return b
    elif b == 0:
        return a
    else:
        return gcd(b, a % b)

## lcm : int int -> int
## Least common multiple of a and b
def lcm(a, b):
    return (a * b) / gcd(a, b)

## div_by_up_to_n : int -> int
## Calculates the smallest integer divisible by all integers up to n inclusive
def div_by_up_to_n(n):
    result = 1
    for x in range(1, n + 1):
        result = lcm(x, result)
    return result



## Problem 6: Sum square difference
## Find the difference between the sum of the squares
## of the first one hundred natural numbers and the square of the sum.

## sum_of_squares : int -> int
## Sum of the squares of integers up to n inclusive
def sum_of_squares(n):
    result = 0
    for x in range(n + 1):
        result = result + x * x
    return result

## square_of_sum : int -> int
## Square of sum of integers up to n inclusive
def square_of_sum(n):
    return sum(range(n + 1)) ** 2

## diff_squares_sums : int -> int
## Calculates the difference between the sum of squares
## and the square of the sum of integers up to n inclusive
def diff_squares_sums(n):
    return square_of_sum(n) - sum_of_squares(n)



## Problem 7: 10001st prime
## By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
## we can see that the 6th prime is 13.
## What is the 10001st prime number?

## is_div_by : int int -> bool
## Is this divisible by that?
def is_div_by(this, that):
    return this % that == 0

## prime_sieve : int -> list((int, 0|1))
## List the primes up to n inclusive using a sieve of Erastothenes
def prime_sieve(n):
    all_n = [(x, 1) for x in range(2, n + 1)]
    divisors = list(range(3, math.ceil(math.floor(n))))
    divisors = divisors[::2]
    divisors = [2] + divisors
    for x in divisors:
        multiples = range(2, n // x + 1)
        for y in multiples:
            all_n[x * y - 2] = (x * y, 0)
    all_n = [i for i in all_n if i[1] == 1]
    return all_n

## nth_prime : int -> int
## Calculates the nth prime

## "p(n) ~ n*log n, where p(n) is the nth prime"
##      where log is the natural logarithm.
## For a safe upper bound on the nth prime, we use log base 2 instead of base e
## http://stackoverflow.com/questions/9625663/calculating-and-printing-the-nth-prime-number/9704912#9704912
def nth_prime(n):
    upper_bound = n * math.ceil(math.log(n) / math.log(2))
    return prime_sieve(upper_bound)[n - 1][0]



## Problem 8: Largest product in a series
## The four adjacent digits in the 1000-digit number [given]
## that have the greatest product are 9 × 9 × 8 × 9 = 5832.
## Find the thirteen adjacent digits in the 1000-digit number
## that have the greatest product. What is the value of this product?

## split_by_0s : int -> list(str)
## Splits an integer along 0s into lists of strings of digits
## Ex. split_by_0s(2003160470) -> ['2', '', '316', '47', '']
def split_by_0s(n):
    return str(n).split('0')

## all_len_13_substrings : list(str) -> list(str)
## Returns a list of all length-13 substrings of strings in the list.
## If a string has length less than 13, it will be ignored
def all_len_13_substrings(strings):
    thirteens = []
    for s in strings:
        for x in range(len(s) - 12):
            thirteens.append(s[x:x+13])
    return thirteens

## largest_len_13_product : int -> int
## Calculates the largest product of 13 adjacent digits in an integer
def largest_len_13_product(n):
    thirteens = all_len_13_substrings(split_by_0s(n))
    largest = 0
    for s in thirteens:
        product = 1
        for i in s:
            product *= int(i)
        if product > largest:
            largest = product
    return largest



## Problem 9: Special Pythagorean triplet
## A Pythagorean triplet is a set of three natural numbers, a < b < c,
## for which a**2 + b**2 = c**2
## There exists exactly one Pythagorean triplet for which a + b + c = 1000.
## Find the product abc.

## pythagorean_triple : int -> int
## Returns a * b * c from a pythagorean triple where a + b + c = the input
## Tries all possibilities
def pythagorean_triple_product(n):
    for a in range(1, n//4 + 1):
        for b in range (a + 1, n + 1):
            c = n - (a + b)
            if a**2 + b**2 == c**2:
                print(a, b, c)
                return a * b * c



## Run these to solve
sum_divs_below_n(1000)
sum_fibs_below_n(4000000)
greatest_prime_factor(600851475143)
print(largest_palindrome_product(1000))
print(div_by_up_to_n(20))
print(diff_squares_sums(100))
print(nth_prime(10001))
print(largest_len_13_product(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450))
print(pythagorean_triple_product(1000))
